import asyncio
from concurrent import futures
from dataclasses import dataclass

import grpc
from kiwipiepy import Kiwi

from proto_built_result import tokenizer_definition_pb2 as tokenizer
from proto_built_result import tokenizer_definition_pb2_grpc as tokenizer_grpc

kiwi_instance = Kiwi()


@dataclass
class TokensAndWords:
    """
    defining the result of tokenizing
    """

    words: list[str]
    tokens: list[str]


async def tokenize(title: str) -> TokensAndWords:
    """
    - handling the tokenizing process asynchronous way
      using ThreadPool and event loop
    - cf. the tokenizer library(Kiwi) is not supports asyncio itself
    """

    loop = asyncio.get_event_loop()

    with futures.ThreadPoolExecutor() as pool:
        parsed_tokens = await loop.run_in_executor(
            pool, kiwi_instance.tokenize, title.title
        )

    tokens: list[str] = []
    for p in parsed_tokens:
        tokens.append(p.form)

    words = title.split()

    return TokensAndWords(tokens, words)


class TokenizerServicer(tokenizer_grpc.TokenizerServicer):
    """
    - protobuf service layer code
    - this service class TokenizerServicer extends TokenizerServicer
      which generated by protoc compiler using .proto file
    """

    async def Tokenize(
        self, request: tokenizer.TokenizingRequest, unused_context
    ) -> tokenizer.TokenizingResult:
        tokenized_result = await tokenize(request.title)

        protobuf_result = tokenizer.TokenizingResult()

        protobuf_result.words = tokenized_result.words
        protobuf_result.tokens = tokenized_result.tokens

        return protobuf_result


async def serve() -> None:
    """
    - protobuf server initiator code
    - first, initiate grpc.aio.server(asyncio)
    - then, add servicer to server
    - finally, open up the port and running the server
    """
    server = grpc.aio.server(futures.ThreadPoolExecutor())
    tokenizer_grpc.add_TokenizerServicer_to_server(TokenizerServicer(), server)

    port_number = 50051
    server.add_insecure_port(f"[::]:{port_number}")

    await server.start()

    print(f"gRPC server listen on {port_number}!")

    await server.wait_for_termination()


"""
- run the serve function with asyncio event loop 
"""
asyncio.get_event_loop().run_until_complete(serve())
